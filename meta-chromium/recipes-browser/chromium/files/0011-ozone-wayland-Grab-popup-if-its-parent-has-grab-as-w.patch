From 65d36d6b314e17db758b83b18799b3ffffc6adca Mon Sep 17 00:00:00 2001
From: Takuro Ashie <ashie@clear-code.com>
Date: Wed, 20 Jul 2022 15:01:31 +0900
Subject: [PATCH 11/13] [ozone/wayland] Grab popup if its parent has grab as
 well

It fixes the crash on opening child menu of 3-dot menu.
Backport https://chromium.googlesource.com/chromium/src/+/8b0f4111d39c8b125b8d2f10d73a58ef95499e65

Signed-off-by: Takuro Ashie <ashie@clear-code.com>
---
 .../wayland/host/shell_popup_wrapper.cc       | 48 +++++++++++++++----
 .../wayland/host/shell_popup_wrapper.h        | 18 ++++++-
 .../wayland/host/xdg_popup_wrapper_impl.cc    |  8 ++--
 .../wayland/host/xdg_popup_wrapper_impl.h     |  3 ++
 .../host/zxdg_popup_v6_wrapper_impl.cc        |  9 ++--
 .../wayland/host/zxdg_popup_v6_wrapper_impl.h |  3 ++
 6 files changed, 72 insertions(+), 17 deletions(-)

diff --git a/ui/ozone/platform/wayland/host/shell_popup_wrapper.cc b/ui/ozone/platform/wayland/host/shell_popup_wrapper.cc
index 32a28c7b0a9d3..4dfa91133f787 100644
--- a/ui/ozone/platform/wayland/host/shell_popup_wrapper.cc
+++ b/ui/ozone/platform/wayland/host/shell_popup_wrapper.cc
@@ -5,14 +5,31 @@
 #include "ui/ozone/platform/wayland/host/shell_popup_wrapper.h"
 
 #include "base/check_op.h"
+#include "base/environment.h"
+#include "base/nix/xdg_util.h"
 #include "base/notreached.h"
+#include "build/chromeos_buildflags.h"
 #include "ui/ozone/platform/wayland/common/wayland_util.h"
 #include "ui/ozone/platform/wayland/host/wayland_connection.h"
+#include "ui/ozone/platform/wayland/host/wayland_popup.h"
 #include "ui/ozone/platform/wayland/host/wayland_toplevel_window.h"
+#include "ui/ozone/platform/wayland/host/wayland_window.h"
 #include "ui/platform_window/platform_window_init_properties.h"
 
 namespace ui {
 
+namespace {
+
+#if !BUILDFLAG(IS_CHROMEOS_LACROS)
+bool IsGnomeShell() {
+  auto env = base::Environment::Create();
+  return base::nix::GetDesktopEnvironment(env.get()) ==
+         base::nix::DESKTOP_ENVIRONMENT_GNOME;
+}
+#endif  // !BUILDFLAG(IS_CHROMEOS_LACROS)
+
+}  // namespace
+
 constexpr uint32_t kAnchorDefaultWidth = 1;
 constexpr uint32_t kAnchorDefaultHeight = 1;
 constexpr uint32_t kAnchorHeightParentMenu = 30;
@@ -181,21 +198,36 @@ PopupType ShellPopupWrapper::GetPopupTypeForPositioner(
     return PopupType::TYPE_3DOT_CHILD_MENU;
 }
 
-bool ShellPopupWrapper::CanGrabPopup(WaylandConnection* connection) const {
+void ShellPopupWrapper::GrabIfPossible(WaylandConnection* connection,
+                                       WaylandWindow* parent_window) {
   // When drag process starts, as described the protocol -
   // https://goo.gl/1Mskq3, the client must have an active implicit grab. If
   // we try to create a popup and grab it, it will be immediately dismissed.
   // Thus, do not take explicit grab during drag process.
   if (connection->IsDragInProgress() || !connection->seat())
-    return false;
+    return;
 
-  // According to the definition of the xdg protocol, the grab request must be
-  // used in response to some sort of user action like a button press, key
-  // press, or touch down event.
   EventType last_event_type = connection->event_serial().event_type;
-  return last_event_type == ET_TOUCH_PRESSED ||
-         last_event_type == ET_KEY_PRESSED ||
-         last_event_type == ET_MOUSE_PRESSED;
+  if (last_event_type != ET_TOUCH_PRESSED &&
+      last_event_type != ET_KEY_PRESSED &&
+      last_event_type != ET_MOUSE_PRESSED)
+    return;
+
+  // The parent of a grabbing popup must either be an xdg_toplevel surface or
+  // another xdg_popup with an explicit grab. If it is a popup that did not take
+  // an explicit grab, an error will be raised, so early out if that's the case.
+  auto* parent_popup = parent_window->AsWaylandPopup();
+  if (parent_popup && !parent_popup->shell_popup()->has_grab_) {
+    return;
+  }
+
+#if !BUILDFLAG(IS_CHROMEOS_LACROS)
+  if (last_event_type == ET_TOUCH_PRESSED && IsGnomeShell())
+    return;
+#endif  // !BUILDFLAG(IS_CHROMEOS_LACROS)
+
+  Grab(connection);
+  has_grab_ = true;
 }
 
 }  // namespace ui
diff --git a/ui/ozone/platform/wayland/host/shell_popup_wrapper.h b/ui/ozone/platform/wayland/host/shell_popup_wrapper.h
index 4535a5eda67e7..173b0566be8d9 100644
--- a/ui/ozone/platform/wayland/host/shell_popup_wrapper.h
+++ b/ui/ozone/platform/wayland/host/shell_popup_wrapper.h
@@ -5,6 +5,8 @@
 #ifndef UI_OZONE_PLATFORM_WAYLAND_HOST_SHELL_POPUP_WRAPPER_H_
 #define UI_OZONE_PLATFORM_WAYLAND_HOST_SHELL_POPUP_WRAPPER_H_
 
+#include <cstdint>
+
 #include "ui/gfx/geometry/rect.h"
 #include "ui/ozone/platform/wayland/common/wayland_object.h"
 #include "ui/platform_window/platform_window_init_properties.h"
@@ -70,7 +72,7 @@ inline WlConstraintAdjustment operator&(WlConstraintAdjustment a,
 // A wrapper around different versions of xdg popups.
 class ShellPopupWrapper {
  public:
-  virtual ~ShellPopupWrapper() {}
+  virtual ~ShellPopupWrapper() = default;
 
   // Initializes the popup surface.
   virtual bool Initialize(WaylandConnection* connection,
@@ -83,7 +85,19 @@ class ShellPopupWrapper {
   PopupType GetPopupTypeForPositioner(PlatformWindowType type,
                                       int last_pointer_button_pressed,
                                       WaylandWindow* parent_window) const;
-  bool CanGrabPopup(WaylandConnection* connection) const;
+
+ protected:
+  // Asks the compositor to take explicit-grab for this popup.
+  virtual void Grab(WaylandConnection* connection) = 0;
+
+  // Returns the serial value for a popup grab, if there is one available.
+  void GrabIfPossible(WaylandConnection* connection,
+                      WaylandWindow* parent_window);
+
+ private:
+  // Tells if explicit grab was taken for this popup. As per
+  // https://wayland.app/protocols/xdg-shell#xdg_popup:request:grab
+  bool has_grab_ = false;
 };
 
 gfx::Rect GetAnchorRect(PopupType menu_type,
diff --git a/ui/ozone/platform/wayland/host/xdg_popup_wrapper_impl.cc b/ui/ozone/platform/wayland/host/xdg_popup_wrapper_impl.cc
index 0e5faf3379ea8..15e2e407872ca 100644
--- a/ui/ozone/platform/wayland/host/xdg_popup_wrapper_impl.cc
+++ b/ui/ozone/platform/wayland/host/xdg_popup_wrapper_impl.cc
@@ -170,9 +170,7 @@ bool XDGPopupWrapperImpl::InitializeStable(
 
   xdg_positioner_destroy(positioner);
 
-  if (CanGrabPopup(connection)) {
-    xdg_popup_grab(xdg_popup_.get(), connection->seat(), connection->serial());
-  }
+  GrabIfPossible(connection, wayland_window_->parent_window());
   xdg_popup_add_listener(xdg_popup_.get(), &xdg_popup_listener, this);
 
   wayland_window_->root_surface()->Commit();
@@ -253,4 +251,8 @@ XDGSurfaceWrapperImpl* XDGPopupWrapperImpl::xdg_surface_wrapper() const {
   return xdg_surface_wrapper_.get();
 }
 
+void XDGPopupWrapperImpl::Grab(WaylandConnection* connection) {
+  xdg_popup_grab(xdg_popup_.get(), connection->seat(), connection->event_serial().serial);
+}
+
 }  // namespace ui
diff --git a/ui/ozone/platform/wayland/host/xdg_popup_wrapper_impl.h b/ui/ozone/platform/wayland/host/xdg_popup_wrapper_impl.h
index 0ffd66748368a..afcc936620bb1 100644
--- a/ui/ozone/platform/wayland/host/xdg_popup_wrapper_impl.h
+++ b/ui/ozone/platform/wayland/host/xdg_popup_wrapper_impl.h
@@ -28,6 +28,9 @@ class XDGPopupWrapperImpl : public ShellPopupWrapper {
                   const gfx::Rect& bounds) override;
   void AckConfigure(uint32_t serial) override;
 
+ protected:
+  void Grab(WaylandConnection* connection) override;
+
  private:
   bool InitializeStable(WaylandConnection* connection,
                         const gfx::Rect& bounds,
diff --git a/ui/ozone/platform/wayland/host/zxdg_popup_v6_wrapper_impl.cc b/ui/ozone/platform/wayland/host/zxdg_popup_v6_wrapper_impl.cc
index 393d03e49082b..af908b7f43d1f 100644
--- a/ui/ozone/platform/wayland/host/zxdg_popup_v6_wrapper_impl.cc
+++ b/ui/ozone/platform/wayland/host/zxdg_popup_v6_wrapper_impl.cc
@@ -172,10 +172,7 @@ bool ZXDGPopupV6WrapperImpl::InitializeV6(
 
   zxdg_positioner_v6_destroy(positioner);
 
-  if (CanGrabPopup(connection)) {
-    zxdg_popup_v6_grab(zxdg_popup_v6_.get(), connection->seat(),
-                       connection->serial());
-  }
+  GrabIfPossible(connection, wayland_window_->parent_window());
   zxdg_popup_v6_add_listener(zxdg_popup_v6_.get(), &zxdg_popup_v6_listener,
                              this);
 
@@ -260,4 +257,8 @@ ZXDGSurfaceV6WrapperImpl* ZXDGPopupV6WrapperImpl::zxdg_surface_v6_wrapper()
   return zxdg_surface_v6_wrapper_.get();
 }
 
+void ZXDGPopupV6WrapperImpl::Grab(WaylandConnection* connection) {
+  zxdg_popup_v6_grab(zxdg_popup_v6_.get(), connection->seat(), connection->event_serial().serial);
+}
+
 }  // namespace ui
diff --git a/ui/ozone/platform/wayland/host/zxdg_popup_v6_wrapper_impl.h b/ui/ozone/platform/wayland/host/zxdg_popup_v6_wrapper_impl.h
index 4c32a1e8f5132..9cb7f6c28511d 100644
--- a/ui/ozone/platform/wayland/host/zxdg_popup_v6_wrapper_impl.h
+++ b/ui/ozone/platform/wayland/host/zxdg_popup_v6_wrapper_impl.h
@@ -28,6 +28,9 @@ class ZXDGPopupV6WrapperImpl : public ShellPopupWrapper {
                   const gfx::Rect& bounds) override;
   void AckConfigure(uint32_t serial) override;
 
+ protected:
+  void Grab(WaylandConnection* connection) override;
+
  private:
   bool InitializeV6(WaylandConnection* connection,
                     const gfx::Rect& bounds,
-- 
2.34.1

